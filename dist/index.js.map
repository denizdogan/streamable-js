{"version":3,"file":"index.js","sources":["../src/constants.js","../src/index.js"],"sourcesContent":["export const STATUS_CODE = {\r\n  UPLOADING: 0,\r\n  PROCESSING: 1,\r\n  READY: 2, // at least one file ready\r\n  ERROR: 3\r\n}\r\n","import fs from 'fs'\r\nimport request from 'request-promise'\r\nimport urljoin from 'url-join'\r\nimport Promise from 'bluebird'\r\nimport retry from 'bluebird-retry'\r\nexport { STATUS_CODE } from './constants'\r\n\r\nconst API_BASE_URL = 'https://api.streamable.com'\r\n\r\nexport class Streamable {\r\n\r\n  /**\r\n   * Upload a video stream to Streamable\r\n   * @param {string} stream the stream of the file\r\n   * @param {string} [title=''] title of the video\r\n   * @return {Promise} A promise to return the response\r\n   */\r\n  uploadStream (stream, title = '') {\r\n    const data = { file: stream, title: title }\r\n    return this._post('/upload', data)\r\n  }\r\n\r\n  /**\r\n   * Upload a video to Streamable\r\n   * @param {string} filePath the path to the file\r\n   * @param {string} [title=''] title of the video\r\n   * @return {Promise} A promise to return the response\r\n   */\r\n  uploadVideo (filePath, title = '') {\r\n    const stream = fs.createReadStream(filePath)\r\n    return this.uploadStream(stream, title)\r\n  }\r\n\r\n  /**\r\n   * Import a video to Streamable\r\n   * @param {string} url the URL to the video\r\n   * @param {string} [title] title of the video\r\n   * @return {Promise} A promise to return the response\r\n   */\r\n  importVideo (url, title = '') {\r\n    const qs = { url: url, title: title }\r\n    return this._get('/import', qs)\r\n  }\r\n\r\n  /**\r\n   * Retrieve a video from Streamable\r\n   * @param {string} shortcode the shortcode of the video\r\n   * @return {Promise} A promise to return the response\r\n   */\r\n  retrieveVideo (shortcode) {\r\n    return this._get(`/videos/${shortcode}`)\r\n  }\r\n\r\n  /**\r\n   * Retrieve a user on Streamable\r\n   * @param {string} username the name of the user\r\n   * @return {Promise} A promise to return the response\r\n   */\r\n  retrieveUser (username) {\r\n    return this._get(`/users/${username}`)\r\n  }\r\n\r\n  /**\r\n   * Wait for a specific status of a video\r\n   * @param {string} shortcode the shortcode of the video\r\n   * @param {number} [status=STATUS_CODE.READY] status to wait for\r\n   * @param {object} [config={}] configuration for bluebird-retry\r\n   * @return {Promise} A promise which resolves on the given status\r\n   */\r\n  waitFor (shortcode, status = STATUS_CODE.READY, config = {}) {\r\n    let go = () => this.retrieveVideo(shortcode).then((resp) => {\r\n      return resp.status === status\r\n        ? Promise.resolve(resp)\r\n        : Promise.reject(resp)\r\n    })\r\n\r\n    return retry(go, config)\r\n  }\r\n\r\n  /**\r\n   * Make an HTTP request to Streamable\r\n   * @param {string} method the HTTP method to use\r\n   * @param {string} path the path\r\n   * @param {object} [options={}] additional options\r\n   * @return {Promise} A promise to return the response\r\n   */\r\n  _request (method, path, options = {}) {\r\n    const url = urljoin(API_BASE_URL, path)\r\n    options = this._prepareOptions(method, path, options)\r\n    return request(url, options)\r\n  }\r\n\r\n  /**\r\n   * Make an HTTP GET request to Streamable\r\n   * @param {string} path the path\r\n   * @param {object} [qs={}] the querystring\r\n   * @return {Promise} A promise to return the response\r\n   */\r\n  _get (path, qs = {}) {\r\n    return this._request('GET', path, { qs: qs })\r\n  }\r\n\r\n  /**\r\n   * Make an HTTP POST request as \"multipart/form\" to Streamable\r\n   * @param {string} path the path\r\n   * @param {object} [data={}] the data\r\n   * @return {Promise} A promise to return the response\r\n   */\r\n  _post (path, data = {}) {\r\n    return this._request('POST', path, { formData: data })\r\n  }\r\n\r\n  /**\r\n   * Prepare an object with request options\r\n   * @param {string} method the HTTP method to use\r\n   * @param {string} path the path to request\r\n   * @param {object} [options={}] additional request options\r\n   * @return {object} Request options object\r\n   */\r\n  _prepareOptions (method, path, options = {}) {\r\n    let forced = {\r\n      method: method,\r\n      json: true\r\n    }\r\n    return Object.assign({}, options, forced)\r\n  }\r\n}\r\n\r\nexport class AuthStreamable extends Streamable {\r\n\r\n  /**\r\n   * @constructor\r\n   * @param {string} username The username to log in with\r\n   * @param {string} password The password to log in with\r\n   */\r\n  constructor (username, password) {\r\n    super()\r\n    this.username = username\r\n    this.password = password\r\n  }\r\n\r\n  /**\r\n   * Retrieve information about the currently logged-in user\r\n   * @return {Promise} A promise to return the response\r\n   */\r\n  retrieveMe () {\r\n    return this._get('/me')\r\n  }\r\n\r\n  /**\r\n   * Prepare an object with request options, including authentication\r\n   * @param {string} method The HTTP method\r\n   * @param {string} path The HTTP path\r\n   * @return {object} Request options object\r\n   */\r\n  _prepareOptions (method, path, options = {}) {\r\n    options = super._prepareOptions(method, path, options)\r\n    let auth = {\r\n      username: this.username,\r\n      password: this.password\r\n    }\r\n    return Object.assign({}, options, { auth: auth })\r\n  }\r\n}\r\n"],"names":["STATUS_CODE"],"mappings":"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"}